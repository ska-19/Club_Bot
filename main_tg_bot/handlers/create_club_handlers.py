from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from keyboards.simple_kb import make_colum_keyboard
from keyboards.user_keyboards import get_main_ikb, get_back_button

from database import requests as rq

router = Router()
class CreateClub(StatesGroup):
    enter_name = State()
    enter_dest = State()
    enter_bio = State()
    enter_link_channel = State()

@router.callback_query(F.data == "create_club")
async def cmd_create(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="üé© <b>–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫–ª—É–±</b>\n\n"
             "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=get_back_button()
    )
    await rq.set_user(callback.message.from_user.id)
    await state.set_state(CreateClub.enter_name)



@router.message(StateFilter("HobbiesQuest:choosing_hobbies"))
async def quest_chosen_incorrectly_hobbies(message: Message):
    await message.answer(
        text="üò≠ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "
             "–∏–∑ —Å–ø–∏—Å–∫–∞:",
    )

@router.message(StateFilter("HobbiesQuest:tell_expectations"))
async def quest_tell_expectations_incorrectly(message: Message):
    await message.answer(
        text="üòá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∫–ª—É–±–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–π!",
        reply_markup=ReplyKeyboardRemove()
    )

#
# @router.message(HobbiesQuest.choosing_stay_in_touch, F.text.in_(available_stay_in_touch))
# async def quest_chosen(message: Message, state: FSMContext):
#     # await state.update_data(chosen_stay_in_touch=message.text.lower())
#     chosen_stay_in_touch = message.text.lower()
#     for i in range(len(available_stay_in_touch)):
#         if available_stay_in_touch[i].lower() == chosen_stay_in_touch:
#             await state.update_data(chosen_stay_in_touch=i)
#     user_data = await state.get_data()
#     await message.answer(
#         text="üéâ <b>–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!</b> ‚ù§Ô∏è\n\n"
#              "–°–æ–∑–¥–∞—Ç–µ–ª—è–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤ –∂–∏–∑–Ω—å —Å–≤–æ–π –∑–∞–º—ã—Å–µ–ª!\n\n"
#              "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –Ω–∞–º! –ó–∞–æ–¥–Ω–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ <b>—Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤</b>, –æ–ø—Ä–æ—Å–∏–≤ —Å–≤–æ–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ –¥—Ä—É–≥–∞!\n"
#              "–ï—â—ë —Ä–∞–∑ –Ω–∞–∂–∞–≤ –Ω–∞ /quest\n\n\n"
#              "p.s. –ö–∞–∫ –≤—ã –º–æ–≥–ª–∏ –∑–∞–º–µ—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–µ –∏ –∏—Ö –Ω–µ –º–Ω–æ–≥–æ)\n"
#              "–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã –∑–Ω–∞–µ—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π "
#              "–∏ —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –µ—â—ë —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç —Ä—è–¥–æ–º.",
#
#         reply_markup=get_main_kb()
#     )
#     await rq.set_user_tell_questionnaire(message.from_user.id, user_data),
#     await state.clear()


# @router.message(HobbiesQuest.choosing_stay_in_touch)
# async def quest_chosen_incorrectly(message: Message):
#     await send_error_message(message, available_stay_in_touch)

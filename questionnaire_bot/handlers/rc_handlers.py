from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards.simple_kb import make_colum_keyboard

router = Router()

yes_no_ans = ["–î–∞", "–ù–µ—Ç"]


class Users_rc_ready:
    def __init__(self):
        self.users_rc_ready = {}

    def __getitem__(self, item):
        return self.users_rc_ready[item]

    def __setitem__(self, key, value):
        self.users_rc_ready[key] = value

    def keys(self):
        return self.users_rc_ready.keys()

    def items(self):
        return self.users_rc_ready.items()

    def __len__(self):
        return len(self.users_rc_ready)

    def clear(self):
        self.users_rc_ready.clear()


class User_rc_pair:
    def __init__(self):
        self.user_rc_pair = {}

    def __getitem__(self, item):
        if item not in self.user_rc_pair.keys():
            return None
        return self.user_rc_pair[item]

    def __setitem__(self, key, value):
        self.user_rc_pair[key] = value

    def keys(self):
        return self.user_rc_pair.keys()

    def items(self):
        return self.user_rc_pair.items()

    def __len__(self):
        return len(self.user_rc_pair)

    def clear(self):
        self.user_rc_pair.clear()


users_rc_ready = Users_rc_ready()
user_rc_pair = User_rc_pair()


class Take_part_state:
    def __init__(self):
        self.state = False

    def set_state(self, state: bool):
        self.state = state

    def __bool__(self):
        return self.state


take_part_state = Take_part_state()


async def send_error_message(message: Message, keyboard_options: list[str],
                             error_text: str = "üò≠ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n\n"
                                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
                                               "–∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"):
    await message.reply(
        text=error_text,
        reply_markup=make_colum_keyboard(keyboard_options, [])
    )


@router.callback_query(F.data == "take_part")
async def cmd_back(callback: F.CallbackQuery):
    if take_part_state:
        await callback.message.answer(
            text="<b>–û–∂–∏–¥–∞–π—Ç–µ –ø–∞—Ä—É</b>",
            reply_markup=ReplyKeyboardRemove()
        )
        users_rc_ready[callback.from_user.id] = True
    else:
        await callback.message.answer(
            text="<b>–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤—ã —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ</b>\n"
                 "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ</i>",
            reply_markup=ReplyKeyboardRemove()
        )
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "decline")
async def cmd_back(callback: F.CallbackQuery):
    await callback.message.answer(
        text="<b>–•–æ—Ä–æ—à–æ, —ç—Ç—É –Ω–µ–¥–µ–ª—é –ø—Ä–æ–ø—É—Å—Ç–∏–º</b>",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "meeting_done")
async def cmd_back(callback: F.CallbackQuery):
    await callback.message.answer(
        text="<b>–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å, –≤–∞–º –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ)</b>",
        reply_markup=ReplyKeyboardRemove()
    )
    users_rc_ready[callback.from_user.id] = False
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "meeting_later")
async def cmd_back(callback: F.CallbackQuery):
    await callback.message.answer(
        text="<b>–•–æ—Ä–æ—à–æ, –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –ø–æ–∑–∂–µ</b>",
        reply_markup=ReplyKeyboardRemove()
    )
    users_rc_ready[callback.from_user.id] = False
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "meeting_notdone")
async def cmd_back(callback: F.CallbackQuery):
    await callback.message.answer(
        text="<b>–ñ–∞–ª—å, –Ω–∞–¥–µ—é—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è</b>",
        reply_markup=ReplyKeyboardRemove()
    )
    users_rc_ready[callback.from_user.id] = False
    await callback.message.delete()
    await callback.answer()

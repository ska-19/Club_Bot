from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards.simple_kb import make_colum_keyboard
from keyboards.user_keyboards import get_main_kb

from database import requests as rq

router = Router()

available_knew_interest_clubs = ["–ù–∏ –∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª", "–°–ª—ã—à–∞–ª, –Ω–æ –Ω–µ —Å–æ—Å—Ç–æ—è–ª", "–°–æ—Å—Ç–æ—è–ª/–°–æ—Å—Ç–æ—é"]
available_readiness_new_meetings = ["–î–∞!", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "–ù–µ –ª—é–±–ª—é –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏"]
available_expectations = ["100% —Ñ–∞–Ω–∞", "75% —Ñ–∞–Ω–∞, –Ω–µ–º–Ω–æ–≥–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏", "50% —Ñ–∞–Ω–∞, 50% —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏",
                          "25% —Ñ–∞–Ω–∞, 75% —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏", "0% —Ñ–∞–Ω–∞, —Ç–æ–ª—å–∫–æ –¥–µ–ª–æ–≤—ã–µ –±–µ—Å–µ–¥—ã"]
available_meeting_format = ["–ì–æ—Ç–æ–≤ –≤–∂–∏–≤—É—é", "–¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω"]
available_zodiac_signs = ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü",
                          "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]
available_personality_type = ["–°—Ç–∞—Ç–µ–≥", "–£—á—ë–Ω—ã–π", "–ö–æ–º–∞–Ω–¥–∏—Ä", "–ü–æ–ª–µ–º–∏—Å—Ç",
                              "–ê–∫—Ç–∏–≤–∏—Å—Ç", "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫", "–¢—Ä–µ–Ω–µ—Ä", "–ë–æ—Ä–µ—Ü",
                              "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ó–∞—â–∏—Ç–Ω–∏–∫", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ö–æ–Ω—Å—É–ª",
                              "–í–∏—Ä—Ç—É–æ–∑", "–ê—Ä—Ç–∏—Å—Ç", "–î–µ–ª–µ—Ü", "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å"]
available_gender = ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]

available_hobbies = ["–í–µ–¥–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π –∏ –±–ª–æ–≥–æ–≤", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ú—É–∑—ã–∫–∞", "–ö–Ω–∏–≥–∏", "–ö–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª—ã", "–í–∏–¥–µ–æ–∏–≥—Ä—ã",
                     "–ò–≥—Ä–∞ –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Ä—É–∫–æ–¥–µ–ª–∏–µ", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                     "–¢–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "–°—Ä–µ–¥–∏ —ç—Ç–∏—Ö –Ω–µ—Ç –º–æ–∏—Ö —Ö–æ–±–±–∏"]
available_stay_in_touch = ["–î–∞", "–ù–µ—Ç"]


class HobbiesQuest(StatesGroup):
    choosing_knew_interest_clubs = State()
    choosing_readiness_new_meetings = State()
    choosing_expectations = State()
    choosing_meeting_format = State()
    choosing_zodiac_signs = State()
    choosing_personality_type = State()
    choosing_gender = State()
    choosing_hobbies = State()
    tell_hobbies = State()
    tell_what_do_you_do = State()
    tell_expectations = State()
    choosing_stay_in_touch = State()


async def send_error_message(message: Message, keyboard_options: list[str],
                             error_text: str = "üò≠ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "
                                               "–∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"):
    await message.answer(
        text=error_text,
        reply_markup=make_colum_keyboard(keyboard_options, [])
    )


@router.message(StateFilter(None), Command("quest"))
async def cmd_quest(message: Message, state: FSMContext):
    await message.answer(
        text="<b>–í—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Å–ª—ã—à–∞–ª–∏ –æ –∫–ª—É–±–∞—Ö –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º?</b>\n\n"
             "–ö–ª—É–± –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º - —ç—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–ª–µ—á–µ–Ω—ã –æ–¥–Ω–æ–π —Ç–µ–º–æ–π –∏ —Ö–æ—Ç—è—Ç –æ–±—â–∞—Ç—å—Å—è —Å "
             "–µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏.\n\n"
             "–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=make_colum_keyboard(available_knew_interest_clubs)
    )
    await rq.set_user(message.from_user.id)
    await state.set_state(HobbiesQuest.choosing_knew_interest_clubs)


@router.message(HobbiesQuest.choosing_knew_interest_clubs, F.text.in_(available_knew_interest_clubs))
async def quest_chosen(message: Message, state: FSMContext):
    # await state.update_data(chosen_knew_interest_clubs=message.text.lower())
    chosen_knew_interest_clubs = message.text.lower()
    for i in range(len(available_knew_interest_clubs)):
        if available_knew_interest_clubs[i].lower() == chosen_knew_interest_clubs:
            await state.update_data(chosen_knew_interest_clubs=i)
    await message.answer(
        text="üôà–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º?",
        reply_markup=make_colum_keyboard(available_readiness_new_meetings)
    )
    await state.set_state(HobbiesQuest.choosing_readiness_new_meetings)


@router.message(StateFilter("HobbiesQuest:choosing_knew_interest_clubs"))
async def quest_chosen_incorrectly_clubs(message: Message):
    await send_error_message(message, available_knew_interest_clubs)


@router.message(HobbiesQuest.choosing_readiness_new_meetings, F.text.in_(available_readiness_new_meetings))
async def quest_chosen(message: Message, state: FSMContext):
    # await state.update_data(chosen_readiness_new_meetings=message.text.lower())
    chosen_readiness_new_meetings = message.text.lower()
    for i in range(len(available_readiness_new_meetings)):
        if available_readiness_new_meetings[i].lower() == chosen_readiness_new_meetings:
            await state.update_data(chosen_readiness_new_meetings=i)
    await message.answer(
        text="–ö–∞–∫–∏–µ —É –≤–∞—Å –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∫–ª—É–±–∞?",
        reply_markup=make_colum_keyboard(available_expectations)
    )
    await state.set_state(HobbiesQuest.choosing_expectations)


@router.message(StateFilter("HobbiesQuest:choosing_readiness_new_meetings"))
async def quest_chosen_incorrectly_readiness(message: Message):
    await send_error_message(message, available_readiness_new_meetings)


@router.message(HobbiesQuest.choosing_expectations, F.text.in_(available_expectations))
async def quest_chosen(message: Message, state: FSMContext):
    # await state.update_data(chosen_expectations=message.text.lower())
    chosen_expectations = message.text.lower()
    for i in range(len(available_expectations)):
        if available_expectations[i].lower() == chosen_expectations:
            await state.update_data(chosen_expectations=i)
    await message.answer(
        text="‚òïÔ∏è –ö–∞–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è: –≤–∂–∏–≤—É—é –∏–ª–∏ –æ–Ω–ª–∞–π–Ω?",
        reply_markup=make_colum_keyboard(available_meeting_format)
    )
    await state.set_state(HobbiesQuest.choosing_meeting_format)


@router.message(StateFilter("HobbiesQuest:choosing_expectations"))
async def quest_chosen_incorrectly_expectations(message: Message):
    await send_error_message(message, available_expectations)


@router.message(HobbiesQuest.choosing_meeting_format, F.text.in_(available_meeting_format))
async def quest_chosen(message: Message, state: FSMContext):
    # await state.update_data(chosen_meeting_format=message.text.lower())
    chosen_meeting_format = message.text.lower()
    for i in range(len(available_meeting_format)):
        if available_meeting_format[i].lower() == chosen_meeting_format:
            await state.update_data(chosen_meeting_format=i)
            await state.update_data(chosen_hobbies='')
    await message.answer(
        text="üåö–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞",
        reply_markup=make_colum_keyboard(available_zodiac_signs)
    )
    await state.set_state(HobbiesQuest.choosing_zodiac_signs)


@router.message(StateFilter("HobbiesQuest:choosing_meeting_format"))
async def quest_chosen_incorrectly_format(message: Message):
    await send_error_message(message, available_meeting_format)


@router.message(HobbiesQuest.choosing_zodiac_signs, F.text.in_(available_zodiac_signs))
async def choosing_zodiac_signs(message: Message, state: FSMContext):
    chosen_zodiac_signs = message.text.lower()
    for i in range(len(available_zodiac_signs)):
        if available_zodiac_signs[i].lower() == chosen_zodiac_signs:
            await state.update_data(chosen_zodiac_signs=i)
    await message.answer(
        text="üòà <b>–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏</b>\n\n"
             "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏, –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π"
             " <a href='https://www.16personalities.com/ru/tipy-lichnosti'>–Ω–∞ —Å–∞–π—Ç–µ</a>.\n",
        reply_markup=make_colum_keyboard(available_personality_type)
    )
    await state.set_state(HobbiesQuest.choosing_personality_type)


@router.message(StateFilter("HobbiesQuest:choosing_zodiac_signs"))
async def quest_chosen_incorrectly_zodiac_signs(message: Message):
    await send_error_message(message, available_zodiac_signs)


@router.message(HobbiesQuest.choosing_personality_type, F.text.in_(available_personality_type))
async def choosing_personality_type(message: Message, state: FSMContext):
    chosen_personality_type = message.text.lower()
    for i in range(len(available_personality_type)):
        if available_personality_type[i].lower() == chosen_personality_type:
            await state.update_data(chosen_personality_type=i)
    await message.answer(
        text="üêô–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –ø–æ–ª",
        reply_markup=make_colum_keyboard(available_gender)
    )
    await state.set_state(HobbiesQuest.choosing_gender)


@router.message(StateFilter("HobbiesQuest:choosing_personality_type"))
async def quest_chosen_incorrectly_personality_type(message: Message):
    await send_error_message(message, available_personality_type)


@router.message(HobbiesQuest.choosing_gender, F.text.in_(available_gender))
async def choosing_gender(message: Message, state: FSMContext):
    chosen_gender = message.text.lower()
    for i in range(len(available_gender)):
        if available_gender[i].lower() == chosen_gender:
            await state.update_data(chosen_gender=i)
    await message.answer(
        text="üé® <b>–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞</b>",
        reply_markup=make_colum_keyboard(available_hobbies)
    )
    await state.set_state(HobbiesQuest.choosing_hobbies)


@router.message(StateFilter("HobbiesQuest:choosing_gender"))
async def quest_chosen_incorrectly_hobbies(message: Message):
    await send_error_message(message, available_gender)


@router.message(HobbiesQuest.choosing_hobbies, F.text.in_(available_hobbies))
async def choosing_hobbies(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chosen_hobbies_str = str(user_data['chosen_hobbies'])
    if chosen_hobbies_str is None:
        chosen_hobbies_str = ""
    chosen_hobbies = chosen_hobbies_str.lower().split(', ')

    chosen_hobbies.append(message.text.lower())
    await state.update_data(chosen_hobbies=', '.join(chosen_hobbies))
    await message.answer(
        text="üëÄ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ö–æ–±–±–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å <b>'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'</b>",
        reply_markup=make_colum_keyboard(available_hobbies, chosen_hobbies, continue_button=True)
    )


@router.message(HobbiesQuest.choosing_hobbies, F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def tell_hobbies(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await rq.set_user_choosing_questionnaire(message.from_user.id, user_data)
    await message.answer(
        text="üèÇ <b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–µ–π!</b>\n\n"
             "–ü—Ä–æ—Å—Ç–æ –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Ç–≤–æ–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –≤–∑–≥–ª—è–¥–∞—Ö, —Ö–æ–±–±–∏)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(HobbiesQuest.tell_hobbies)


@router.message(StateFilter("HobbiesQuest:choosing_hobbies"))
async def quest_chosen_incorrectly_hobbies(message: Message):
    await message.answer(
        text="üò≠ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "
             "–∏–∑ —Å–ø–∏—Å–∫–∞:",
    )


@router.message(HobbiesQuest.tell_hobbies, lambda message: len(message.text) > 5)
async def tell_hobbies(message: Message, state: FSMContext):
    await state.update_data(tell_hobbies=message.text.lower())
    await message.answer(
        text="<b>–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?</b>\n\n"
             "‚ùå –î–∏–∑–∞–π–Ω–µ—Ä \n"
             "‚úÖ Motion-–¥–∏–∑–∞–π–Ω–µ—Ä –≤ Et-tech —Å—Ç–∞—Ä—Ç–∞–ø–µ, –∑–∞–Ω–∏–º–∞—é—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å–æ–≤.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(HobbiesQuest.tell_what_do_you_do)


@router.message(StateFilter("HobbiesQuest:tell_hobbies"))
async def quest_tell_hobbies_incorrectly(message: Message):
    await message.answer(
        text="üòá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ö–æ–±–±–∏, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–π!",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(HobbiesQuest.tell_what_do_you_do, lambda message: len(message.text) > 5)
async def tell_what_do_you_do(message: Message, state: FSMContext):
    await state.update_data(tell_what_do_you_do=message.text.lower())
    await message.answer(
        text="<b>–ï—Å–ª–∏ –±—ã –≤—ã —Å–æ—Å—Ç–æ—è–ª–∏ –≤ –∫–ª—É–±–µ, —Ç–æ –∑–∞—á–µ–º?</b>\n\n"
             "–ü—Ä–æ—Å—Ç–æ –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Ç–æ–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –∫–ª—É–±–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(HobbiesQuest.tell_expectations)


@router.message(StateFilter("HobbiesQuest:tell_what_do_you_do"))
async def quest_tell_what_do_you_do_incorrectly(message: Message):
    await message.answer(
        text="üòá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —á–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–π!",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(HobbiesQuest.tell_expectations, lambda message: len(message.text) > 5)
async def invite_friends(message: Message, state: FSMContext):
    await state.update_data(tell_expectations=message.text.lower())
    await message.answer(
        text="–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏?",
        reply_markup=make_colum_keyboard(available_stay_in_touch)
    )
    await state.set_state(HobbiesQuest.choosing_stay_in_touch)


@router.message(StateFilter("HobbiesQuest:tell_expectations"))
async def quest_tell_expectations_incorrectly(message: Message):
    await message.answer(
        text="üòá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∫–ª—É–±–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–π!",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(HobbiesQuest.choosing_stay_in_touch, F.text.in_(available_stay_in_touch))
async def quest_chosen(message: Message, state: FSMContext):
    # await state.update_data(chosen_stay_in_touch=message.text.lower())
    chosen_stay_in_touch = message.text.lower()
    for i in range(len(available_stay_in_touch)):
        if available_stay_in_touch[i].lower() == chosen_stay_in_touch:
            await state.update_data(chosen_stay_in_touch=i)
    user_data = await state.get_data()
    await message.answer(
        text=f"–í—ã {user_data['chosen_knew_interest_clubs']} –æ –∫–ª—É–±–∞—Ö –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
             f"–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º: {user_data['chosen_readiness_new_meetings']}.\n"
             f"–û–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∫–ª—É–±–∞: {user_data['chosen_expectations']}.\n"
             f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á: {user_data['chosen_meeting_format']}.\n"
             f"–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {user_data['chosen_zodiac_signs']}.\n"
             f"–í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {user_data['chosen_personality_type']}.\n"
             f"–í–∞—à –ø–æ–ª: {user_data['chosen_gender']}.\n"
             f"–í–∞—à–∏ —Ö–æ–±–±–∏: {user_data['chosen_hobbies']}.\n"
             f"–û–ø–∏—Å–∞–Ω–∏–µ —Ö–æ–±–±–∏: {user_data['tell_hobbies']}.\n"
             f"–ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: {user_data['tell_what_do_you_do']}.\n"
             f"–û–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∫–ª—É–±–∞: {user_data['tell_expectations']}.\n"
             f"–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏: {user_data['chosen_stay_in_touch']}.",
        reply_markup=get_main_kb()
    )
    await rq.set_user_tell_questionnaire(message.from_user.id, user_data),
    await state.clear()


@router.message(HobbiesQuest.choosing_stay_in_touch)
async def quest_chosen_incorrectly(message: Message):
    await send_error_message(message, available_stay_in_touch)
